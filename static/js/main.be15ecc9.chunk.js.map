{"version":3,"sources":["Utils.js","Stars.js","PlayNumber.js","PlayAgain.js","useGameState.js","StarMatch.js","App.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","console","log","j","len","candidateSet","concat","candidateSum","push","Stars","props","count","map","starId","key","className","colors","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","useGameState","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","StarMatch","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","App","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be15ecc9.chunk.js","sourcesContent":["export const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            console.log(\"i=\"+i)\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                console.log(\"j=\"+j+\"  sets[j]=\"+sets[j])\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                console.log(\"candidateSet=\"+candidateSet)\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n                console.log(\"sets--\"+sets)\r\n                console.log(\"sums--\"+sums)\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};","import React from 'react';\r\n\r\nimport { utils } from './Utils';\r\n\r\nexport const Stars = (props) => (\r\n    utils.range(1, props.count).map(starId =>\r\n        <div key={starId} className=\"star\" />\r\n    )\r\n)","import React from 'react';\r\n\r\nconst colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n\r\nexport const PlayNumber = (props) => (\r\n  <button className=\"number\"\r\n    style={{ backgroundColor: colors[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}>\r\n    {props.number}\r\n  </button>\r\n)","import React from 'react';\r\n\r\nconst PlayAgain = props => (\r\n\t<div className=\"game-done\">\r\n  \t<div \r\n    \tclassName=\"message\"\r\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n    >\r\n  \t  {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n  \t</div>\r\n\t  <button onClick={props.onClick}>Play Again</button>\r\n\t</div>\r\n);\r\n\r\nexport default PlayAgain;","import { useState, useEffect } from \"react\";\r\nimport { utils } from \"./Utils\";\r\n\r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n    const [secondsLeft, setSecondsLeft] = useState(20);\r\n\r\n    useEffect(() => {\r\n        const timerId = setTimeout(() => {\r\n            if (secondsLeft > 0 && availableNums.length > 0) {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }\r\n        }, 1000);\r\n        return () => clearTimeout(timerId);\r\n    }, [secondsLeft]);\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState }\r\n}\r\n\r\nexport default useGameState;","import React, { useState, useEffect } from 'react';\r\nimport { utils } from './Utils';\r\nimport { Stars } from './Stars';\r\nimport { PlayNumber } from './PlayNumber';\r\nimport PlayAgain from './PlayAgain';\r\nimport useGameState from './useGameState';\r\n\r\nconst StarMatch = (props) => {\r\n  const {stars, availableNums, candidateNums, secondsLeft, setGameState} = useGameState();\r\n\r\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n  \r\n  const gameStatus = availableNums.length === 0 \r\n  \t? 'won'\r\n    : secondsLeft === 0 ? 'lost' : 'active' \r\n\r\n  const numberStatus = (number) => {\r\n    if (!availableNums.includes(number)) {\r\n      return 'used';\r\n    }\r\n    if (candidateNums.includes(number)) {\r\n      return candidatesAreWrong ? 'wrong' : 'candidate';\r\n    }\r\n    return 'available';\r\n  };\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (gameStatus !== 'active' || currentStatus === 'used') {\r\n      return;\r\n    }\r\n\r\n\t\tconst newCandidateNums =\r\n      currentStatus === 'available'\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter(cn => cn !== number);\r\n\r\n    setGameState(newCandidateNums)\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== 'active' ? (\r\n          \t<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\r\n          ) : (\r\n          \t<Stars count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, 9).map(number =>\r\n            <PlayNumber\r\n              key={number}\r\n              status={numberStatus(number)}\r\n              onClick={onNumberClick}\r\n              number={number} />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarMatch","import React, {useState} from 'react';\nimport './App.css';\nimport StarMatch from './StarMatch';\n\nfunction App() {\n    const [gameId, setGameId] = useState(1);\n    return <StarMatch key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}